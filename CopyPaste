using System.Collections.Generic;
using UnityEngine;

public class AddRedWallsCommand : MonoBehaviour
{
    [SerializeField] private GameObject ground;

    void Start()
    {
        if (ground == null)
        {
            Debug.LogWarning("The ground object was not assigned.");
            return;
        }

        // Get the ground's bounds
        Renderer groundRenderer = ground.GetComponent<Renderer>();
        if (groundRenderer == null)
        {
            Debug.LogWarning("The ground object does not have a Renderer component.");
            return;
        }

        Bounds groundBounds = groundRenderer.bounds;

        // Calculate wall positions and dimensions
        float wallHeight = 10f;
        float wallThickness = 1f;
        Vector3 groundCenter = groundBounds.center;
        Vector3 groundSize = groundBounds.size;

        // Create walls
        List<GameObject> walls = new List<GameObject>();
        walls.Add(CreateWall("FrontWall", new Vector3(groundCenter.x, wallHeight / 2, groundCenter.z + groundSize.z / 2 + wallThickness / 2), new Vector3(groundSize.x, wallHeight, wallThickness)));
        walls.Add(CreateWall("BackWall", new Vector3(groundCenter.x, wallHeight / 2, groundCenter.z - groundSize.z / 2 - wallThickness / 2), new Vector3(groundSize.x, wallHeight, wallThickness)));
        walls.Add(CreateWall("LeftWall", new Vector3(groundCenter.x - groundSize.x / 2 - wallThickness / 2, wallHeight / 2, groundCenter.z), new Vector3(wallThickness, wallHeight, groundSize.z)));
        walls.Add(CreateWall("RightWall", new Vector3(groundCenter.x + groundSize.x / 2 + wallThickness / 2, wallHeight / 2, groundCenter.z), new Vector3(wallThickness, wallHeight, groundSize.z)));

        // Apply red material to walls
        Material redMaterial = new Material(Shader.Find("Standard"));
        redMaterial.color = Color.red;

        foreach (var wall in walls)
        {
            Renderer wallRenderer = wall.GetComponent<Renderer>();
            if (wallRenderer != null)
            {
                wallRenderer.material = redMaterial;
            }
        }

        Debug.Log("Red-colored walls were added around the borders of the ground.");
    }

    private GameObject CreateWall(string name, Vector3 position, Vector3 scale)
    {
        GameObject wall = GameObject.CreatePrimitive(PrimitiveType.Cube);
        wall.name = name;
        wall.transform.position = position;
        wall.transform.localScale = scale;
        return wall;
    }
}
